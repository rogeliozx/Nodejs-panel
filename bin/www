#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var appIO = require('../appIO');
var debug = require('debug')('botz:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */


/**
 * Listen on provided port, on all network interfaces.
 */


var MongoClient = require('mongodb').MongoClient	;

var database = "panelz";
var url = "mongodb://localhost:27017/"+database+"?maxPoolSize=434";


MongoClient.connect(url,{ useNewUrlParser: true , useUnifiedTopology: true }, function(err, dbase) {
  if (err) throw err;
  var db = dbase.db(database);

  var server = http.createServer(app);
  var io = require('socket.io')(server);
  appIO(io)

  app.db = db
  io.db = db
  io.dbase = dbase

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  var crawler = require('../crawler')(db, io);
  crawler.run()
  const sleep = require('../crawler/sleep')

  let statsCount = 0
  const statics = async () => {
    while(true){
      var requests = await db.collection("requests").find().count()
      var jsons = await db.collection("jsons").find().count()
      var requestsWorking = await db.collection("requests").find({ working:true}).count()
      var jsonsWorking = await db.collection("jsons").find({ working:true}).count()
     
      var d = new Date()

      const stats = {
        requests,
        jsons,
        requestsWorking,
        jsonsWorking,
      }
      io.sockets.emit('stats', stats);
      await sleep(2000);
    }
  }
  statics()



  let statsCount2 = 0
  const staticsCount = async () => {
    while(true){
      var venues = await db.collection('venues').find({geometry:{$exists:true}, _geoCountry:{$exists:false} }).count()

      var segments = await db.collection('segments').find({geometry:{$exists:true}, _geoCountry:{$exists:false} }).count()
      var requests = await db.collection("requests").find().count()
      var jsons = await db.collection("jsons").find().count()
      var requestsWorking = await db.collection("requests").find({ working:true}).count()
      var jsonsWorking = await db.collection("jsons").find({ working:true}).count()
      var gpids = await db.collection("gpids").find().count()
     
      let tiles = 0
      var crawls = await db.collection("crawls").find().toArray()
      for (let crawlIndex = 0; crawlIndex < crawls.length; crawlIndex++) {
          const crawl = crawls[crawlIndex];
          var substates = await db.collection("substate").find({_id:{"$in":crawl.substates}}).toArray()
          for (let substatesIndex = 0; substatesIndex < substates.length; substatesIndex++) {
              const substate = substates[substatesIndex];
              const properties = {
                  substate:substate.substateID,
                  zoom:parseInt(crawl.zoom)
              }
              var _tiles = await db.collection("tiles").find(properties).toArray()
              tiles = tiles + _tiles.length
          }
      }

      var d = new Date()

      const stats = {
        venues,
        tiles,
        segments,
        requests,
        jsons,
        gpids,
        requestsWorking,
        jsonsWorking,
        FullYear:d.getFullYear(),
        Month:d.getMonth(),
        Date:d.getDate(),
        Hours:d.getHours(),
        Minutes:d.getMinutes(),
        Seconds:d.getSeconds(),
        Milliseconds:d.getMilliseconds(),
        dateObj:d
      }

      await db.collection("stats").insertOne(stats);
      

      // var stats = await db.collection("stats").find().sort({_id:-1}).limit(60*10).toArray()
      // var stats = await db.collection("stats").aggregate(
      //       [
      //         {
      //           $group : {
      //               _id : { FullYear: '$FullYear', Month: '$Month', 'Date': '$Date', Hours: '$Hours' },
      //               venues: { $last: '$venues' },
      //               tiles: { $last: '$tiles' },
      //               segments: { $last: '$segments' },
      //               requests: { $last: '$requests' },
      //               jsons: { $last: '$jsons' },
      //               gpids: { $last: '$gpids' },
      //               intersects: { $last: '$intersects' },
      //               dateObj: { $last: '$dateObj' },
      //           }
      //         },
      //         { $sort : { dateObj : -1 } },
      //         { $limit : 20 }
      //       ]
      //   ).toArray()
      io.sockets.emit('stats', stats);
      await sleep(10000);
    }
  }
  staticsCount()

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }

})
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
